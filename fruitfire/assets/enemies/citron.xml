<body>
    <name>Citron</name>
    <type>
        <i>max</i>
    </type>

    <size>16</size>
    <health>40</health>
    <colors>
        <i>16</i>
        <i>17</i>
    </colors>
    <location x="0" y="96"/>

    <textures>
        <texture name="walk">
            <location x="0" y="0" w="32" h="32"/>
        </texture>
        <texture name="open-1">
            <location x="32" y="0" w="32" h="32"/>
        </texture>
        <texture name="open-2">
            <location x="64" y="0" w="32" h="32"/>
        </texture>
        <texture name="piece-out">
            <location x="96" y="0" w="16" h="16"/>
        </texture>
        <texture name="piece-in">
            <location x="96" y="16" w="16" h="16"/>
        </texture>
        <texture name="eyes" crop="true">
            <location x="112" y="0" w="16" h="8"/>
        </texture>
        <texture name="shadow" crop="true">
            <location x="128" y="0" w="32" h="32"/>
        </texture>
    </textures>

    <components>
        <component id="shadow">
            <texture>shadow</texture>
            <opacity>0.5</opacity>
            <offset x="-2" y="4"/>
        </component>
        <component id="body" body="true">
            <texture>walk</texture>
            <type>og+outline</type>
        </component>
        <component id="eyes">
            <texture>eyes</texture>
        </component>

        <component id="piece-tl-in" body="true">
            <texture>piece-in</texture>
            <type>og+outline</type>
            <offset x="-8" y="-8"/>
            <opacity>0</opacity>
            <dir>0</dir>
        </component>
        <component id="piece-tr-in" body="true">
            <texture>piece-in</texture>
            <type>og+outline</type>
            <offset x="8" y="-8"/>
            <opacity>0</opacity>
            <dir>90</dir>
        </component>
        <component id="piece-br-in" body="true">
            <texture>piece-in</texture>
            <type>og+outline</type>
            <offset x="8" y="8"/>
            <opacity>0</opacity>
            <dir>180</dir>
        </component>
        <component id="piece-bl-in" body="true">
            <texture>piece-in</texture>
            <type>og+outline</type>
            <offset x="-8" y="8"/>
            <opacity>0</opacity>
            <dir>270</dir>
        </component>

        <component id="piece-tl-out" body="true">
            <texture>piece-out</texture>
            <type>og+outline</type>
            <offset x="-8" y="-8"/>
            <opacity>0</opacity>
            <dir>0</dir>
        </component>
        <component id="piece-tr-out" body="true">
            <texture>piece-out</texture>
            <type>og+outline</type>
            <offset x="8" y="-8"/>
            <opacity>0</opacity>
            <dir>90</dir>
        </component>
        <component id="piece-br-out" body="true">
            <texture>piece-out</texture>
            <type>og+outline</type>
            <offset x="8" y="8"/>
            <opacity>0</opacity>
            <dir>180</dir>
        </component>
        <component id="piece-bl-out" body="true">
            <texture>piece-out</texture>
            <type>og+outline</type>
            <offset x="-8" y="8"/>
            <opacity>0</opacity>
            <dir>270</dir>
        </component>
    </components>

    <functions>
        <function name="set-piece-opacities">
            <args>
                <i>opacity</i>
            </args>
            <commands>
                <set>
                    <prop>~piece-tl-in.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-tr-in.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-br-in.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-bl-in.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-tl-out.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-tr-out.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-br-out.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
                <set>
                    <prop>~piece-bl-out.opacity</prop>
                    <value><get>arg:opacity</get></value>
                </set>
            </commands>
        </function>
        <function name="place-pieces">
            <args>
                <i>dir</i>
                <i>inRadius</i>
                <i>outRadius</i>
            </args>
            <commands>
                <set>
                    <prop>arg:dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>arg:inSplitX</prop>
                    <value><op>
                        <left><call>
                            <func>util.cos</func>
                            <args>
                                <op>
                                    <left><get>arg:dir</get></left>
                                    <op>+</op>
                                    <right><json>45</json></right>
                                </op>
                            </args>
                        </call></left>
                        <op>*</op>
                        <right><get>arg:inRadius</get></right>
                    </op></value>
                </set>
                <set>
                    <prop>arg:inSplitY</prop>
                    <value><op>
                        <left><call>
                            <func>util.sin</func>
                            <args>
                                <op>
                                    <left><get>arg:dir</get></left>
                                    <op>+</op>
                                    <right><json>45</json></right>
                                </op>
                            </args>
                        </call></left>
                        <op>*</op>
                        <right><get>arg:inRadius</get></right>
                    </op></value>
                </set>
                <set>
                    <prop>arg:outSplitX</prop>
                    <value><op>
                        <left><call>
                            <func>util.cos</func>
                            <args>
                                <op>
                                    <left><get>arg:dir</get></left>
                                    <op>+</op>
                                    <right><json>45</json></right>
                                </op>
                            </args>
                        </call></left>
                        <op>*</op>
                        <right><get>arg:outRadius</get></right>
                    </op></value>
                </set>
                <set>
                    <prop>arg:outSplitY</prop>
                    <value><op>
                        <left><call>
                            <func>util.sin</func>
                            <args>
                                <op>
                                    <left><get>arg:dir</get></left>
                                    <op>+</op>
                                    <right><json>45</json></right>
                                </op>
                            </args>
                        </call></left>
                        <op>*</op>
                        <right><get>arg:outRadius</get></right>
                    </op></value>
                </set>
                <!-- top left piece -->
                <set>
                    <prop>~piece-tl-in.offset.x</prop>
                    <value><op>
                        <left><get>arg:inSplitX</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tl-in.offset.y</prop>
                    <value><op>
                        <left><get>arg:inSplitY</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tl-in.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>0</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tl-out.offset.x</prop>
                    <value><op>
                        <left><get>arg:outSplitX</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tl-out.offset.y</prop>
                    <value><op>
                        <left><get>arg:outSplitY</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tl-out.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>0</json></right>
                    </op></value>
                </set>
                <!-- bottom right piece -->
                <set>
                    <prop>~piece-br-in.offset.x</prop>
                    <value><op>
                        <left><get>arg:inSplitX</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-br-in.offset.y</prop>
                    <value><op>
                        <left><get>arg:inSplitY</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-br-in.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>180</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-br-out.offset.x</prop>
                    <value><op>
                        <left><get>arg:outSplitX</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-br-out.offset.y</prop>
                    <value><op>
                        <left><get>arg:outSplitY</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-br-out.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>180</json></right>
                    </op></value>
                </set>
                <!-- top right piece -->
                <set>
                    <prop>~piece-tr-in.offset.x</prop>
                    <value><op>
                        <left><get>arg:inSplitY</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tr-in.offset.y</prop>
                    <value><op>
                        <left><get>arg:inSplitX</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tr-in.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>90</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tr-out.offset.x</prop>
                    <value><op>
                        <left><get>arg:outSplitY</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tr-out.offset.y</prop>
                    <value><op>
                        <left><get>arg:outSplitX</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-tr-out.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>90</json></right>
                    </op></value>
                </set>
                <!-- bottom left piece -->
                <set>
                    <prop>~piece-bl-in.offset.x</prop>
                    <value><op>
                        <left><get>arg:inSplitY</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-bl-in.offset.y</prop>
                    <value><op>
                        <left><get>arg:inSplitX</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-bl-in.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>270</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-bl-out.offset.x</prop>
                    <value><op>
                        <left><get>arg:outSplitY</get></left>
                        <op>*</op>
                        <right><json>-1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-bl-out.offset.y</prop>
                    <value><op>
                        <left><get>arg:outSplitX</get></left>
                        <op>*</op>
                        <right><json>1</json></right>
                    </op></value>
                </set>
                <set>
                    <prop>~piece-bl-out.dir</prop>
                    <value><op>
                        <left><get>arg:dir</get></left>
                        <op>+</op>
                        <right><json>270</json></right>
                    </op></value>
                </set>
            </commands>
        </function>
        <function name="place-lasers">
            <args>
                <i>dir</i>
                <i>radius</i>
            </args>
            <commands>
                <set>
                    <prop>laserDir</prop>
                    <value><get>arg:dir</get></value>
                </set>
                <set>
                    <prop>laserRadius</prop>
                    <value><get>arg:radius</get></value>
                </set>
                <for>
                    <of><get>lasers</get></of>
                    <body>
                        <set>
                            <prop>laser</prop>
                            <value><get>arg:value</get></value>
                        </set>
                        <set>
                            <prop>laser.zOffsetY</prop>
                            <value><json>-10000000000</json></value>
                        </set>
                        <set>
                            <prop>laser.dir</prop>
                            <value><op>
                                <left><get>laserDir</get></left>
                                <op>+</op>
                                <right><op>
                                    <left><json>90</json></left>
                                    <op>*</op>
                                    <right><get>arg:i</get></right>
                                </op></right>
                            </op></value>
                        </set>
                        <call>
                            <func>laser.pos.set</func>
                            <args>
                                <get>pos</get>
                            </args>
                        </call>
                        <set>
                            <prop>laser.pos.x</prop>
                            <value><op>
                                <left><get>laser.pos.x</get></left>
                                <op>+</op>
                                <right><op>
                                    <left><get>laserRadius</get></left>
                                    <op>*</op>
                                    <right><call>
                                        <func>util.cos</func>
                                        <args>
                                            <op>
                                                <left><get>laserDir</get></left>
                                                <op>+</op>
                                                <right><op>
                                                    <left><json>90</json></left>
                                                    <op>*</op>
                                                    <right><get>arg:i</get></right>
                                                </op></right>
                                            </op>
                                        </args>
                                    </call></right>
                                </op></right>
                            </op></value>
                        </set>
                        <set>
                            <prop>laser.pos.y</prop>
                            <value><op>
                                <left><get>laser.pos.y</get></left>
                                <op>+</op>
                                <right><op>
                                    <left><get>laserRadius</get></left>
                                    <op>*</op>
                                    <right><call>
                                        <func>util.sin</func>
                                        <args>
                                            <op>
                                                <left><get>laserDir</get></left>
                                                <op>+</op>
                                                <right><op>
                                                    <left><json>90</json></left>
                                                    <op>*</op>
                                                    <right><get>arg:i</get></right>
                                                </op></right>
                                            </op>
                                        </args>
                                    </call></right>
                                </op></right>
                            </op></value>
                        </set>
                    </body>
                </for>
            </commands>
        </function>
    </functions>

    <animations>
        <animation name="walking" loop="true">
        </animation>
    </animations>

    <states initial="attacking">
        <state name="attacking">
            <start>
                <set>
                    <prop>attackingTimer</prop>
                    <value><op>
                        <left><json>5</json></left>
                        <op>+</op>
                        <right><op>
                            <left><json>[-0.5, 0.5]</json></left>
                            <op>lerp</op>
                            <right><call>
                                <func>Math.random</func>
                                <args></args>
                            </call></right>
                        </op></right>
                    </op></value>
                </set>
            </start>
            <continual>
                <set>
                    <prop>attackingTimer</prop>
                    <value><op>
                        <left><get>attackingTimer</get></left>
                        <op>-</op>
                        <right><get>env.delta</get></right>
                    </op></value>
                </set>
                <if>
                    <cond><op>
                        <left><get>attackingTimer</get></left>
                        <op>lt</op>
                        <right><json>0</json></right>
                    </op></cond>
                    <true>
                        <set>
                            <prop>reverse</prop>
                            <value><json>false</json></value>
                        </set>
                        <set>
                            <prop>state</prop>
                            <value><json>"split1"</json></value>
                        </set>
                    </true>
                </if>
                <call>
                    <func>gazeAt</func>
                    <args>
                        <get>engine.playerEntity.pos</get>
                        <json>0.9</json>
                    </args>
                </call>
                <call>
                    <func>knockInDir</func>
                    <args>
                        <json>0.001</json>
                    </args>
                </call>
                <set>
                    <prop>animation</prop>
                    <value><json>"walking"</json></value>
                </set>
                <call>
                    <func>~eyes.offset.set</func>
                    <args>
                        <call>
                            <func>getLookingOffset</func>
                            <args></args>
                        </call>
                    </args>
                </call>
                <call>
                    <func>~eyes.offset.iadd</func>
                    <args>
                        <json>[0, 12]</json>
                    </args>
                </call>
            </continual>
        </state>
        <state name="split1">
            <start>
                <set>
                    <prop>splitTimer</prop>
                    <value><json>0.5</json></value>
                </set>
                <set>
                    <prop>~eyes.opacity</prop>
                    <value><json>0</json></value>
                </set>
            </start>
            <stop>
                <set>
                    <prop>~body.texture</prop>
                    <value><json>"walk"</json></value>
                </set>
                <set>
                    <prop>~eyes.opacity</prop>
                    <value><json>1</json></value>
                </set>
            </stop>
            <continual>
                <set>
                    <prop>splitTimer</prop>
                    <value><op>
                        <left><get>splitTimer</get></left>
                        <op>-</op>
                        <right><get>env.delta</get></right>
                    </op></value>
                </set>
                <if>
                    <cond><op>
                        <left><get>splitTimer</get></left>
                        <op>lt</op>
                        <right><json>0</json></right>
                    </op></cond>
                    <true>
                        <if>
                            <cond><get>reverse</get></cond>
                            <true>
                                <set>
                                    <prop>state</prop>
                                    <value><json>"attacking"</json></value>
                                </set>
                            </true>
                            <false>
                                <set>
                                    <prop>state</prop>
                                    <value><json>"split2"</json></value>
                                </set>
                            </false>
                        </if>
                    </true>
                </if>
                <set>
                    <prop>useOpen1</prop>
                    <value><op>
                        <left><get>splitTimer</get></left>
                        <op>gt</op>
                        <right><json>0.25</json></right>
                    </op></value>
                </set>
                <if>
                    <cond><get>reverse</get></cond>
                    <true>
                        <set>
                            <prop>useOpen1</prop>
                            <value><op>
                                <left><get>useOpen1</get></left>
                                <op>!</op>
                            </op></value>
                        </set>
                    </true>
                </if>
                <if>
                    <cond><get>useOpen1</get></cond>
                    <true>
                        <set>
                            <prop>~body.texture</prop>
                            <value><json>"open-1"</json></value>
                        </set>
                    </true>
                    <false>
                        <set>
                            <prop>~body.texture</prop>
                            <value><json>"open-2"</json></value>
                        </set>
                    </false>
                </if>
            </continual>
        </state>
        <state name="split2">
            <start>
                <set>
                    <prop>splitTimer</prop>
                    <value><json>0.5</json></value>
                </set>
                <set>
                    <prop>~body.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <set>
                    <prop>~eyes.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <set>
                    <prop>~shadow.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <call>
                    <func>func:set-piece-opacities</func>
                    <args>
                        <json>1</json>
                    </args>
                </call>
            </start>
            <stop>
                <set>
                    <prop>~body.opacity</prop>
                    <value><json>1</json></value>
                </set>
                <set>
                    <prop>~eyes.opacity</prop>
                    <value><json>1</json></value>
                </set>
                <set>
                    <prop>~shadow.opacity</prop>
                    <value><json>0.5</json></value>
                </set>
                <call>
                    <func>func:set-piece-opacities</func>
                    <args>
                        <json>0</json>
                    </args>
                </call>
            </stop>
            <continual>
                <set>
                    <prop>splitTimer</prop>
                    <value><op>
                        <left><get>splitTimer</get></left>
                        <op>-</op>
                        <right><get>env.delta</get></right>
                    </op></value>
                </set>
                <if>
                    <cond><op>
                        <left><get>splitTimer</get></left>
                        <op>lt</op>
                        <right><json>0</json></right>
                    </op></cond>
                    <true>
                        <if>
                            <cond><get>reverse</get></cond>
                            <true>
                                <set>
                                    <prop>state</prop>
                                    <value><json>"split1"</json></value>
                                </set>
                            </true>
                            <false>
                                <set>
                                    <prop>state</prop>
                                    <value><json>"shooting"</json></value>
                                </set>
                            </false>
                        </if>
                    </true>
                </if>
                <if>
                    <cond><get>reverse</get></cond>
                    <true>
                        <set>
                            <prop>inSplitRadius</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [14, 11]]</json></right>
                            </op></value>
                        </set>
                        <set>
                            <prop>outSplitRadius</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [20, 11]]</json></right>
                            </op></value>
                        </set>
                        <set>
                            <prop>splitDir</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [1, 0]]</json></right>
                            </op></value>
                        </set>
                    </true>
                    <false>
                        <set>
                            <prop>inSplitRadius</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [11, 16]]</json></right>
                            </op></value>
                        </set>
                        <set>
                            <prop>outSplitRadius</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [11, 24]]</json></right>
                            </op></value>
                        </set>
                        <set>
                            <prop>splitDir</prop>
                            <value><op>
                                <left><get>splitTimer</get></left>
                                <op>map-rg</op>
                                <right><json>[[0.5, 0], [0, 1]]</json></right>
                            </op></value>
                        </set>
                    </false>
                </if>
                <set>
                    <prop>splitDir</prop>
                    <value><op>
                        <left><get>splitDir</get></left>
                        <op>*</op>
                        <right><op>
                            <left><call>
                                <func>util.angleRelDegrees</func>
                                <args>
                                    <json>0</json>
                                    <get>dir</get>
                                </args>
                            </call></left>
                            <op>%</op>
                            <right><json>90</json></right>
                        </op></right>
                    </op></value>
                </set>
                <call>
                    <func>func:place-pieces</func>
                    <args>
                        <get>splitDir</get>
                        <get>inSplitRadius</get>
                        <get>outSplitRadius</get>
                    </args>
                </call>
            </continual>
        </state>
        <state name="shooting">
            <start>
                <set>
                    <prop>shootingTimer</prop>
                    <value><json>3</json></value>
                </set>
                <set>
                    <prop>~body.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <set>
                    <prop>~eyes.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <set>
                    <prop>~shadow.opacity</prop>
                    <value><json>0</json></value>
                </set>
                <call>
                    <func>func:set-piece-opacities</func>
                    <args>
                        <json>1</json>
                    </args>
                </call>
                <call>
                    <func>engine.cameraEntity.addShakeFrom</func>
                    <args>
                        <get>pos</get>
                        <json>2.5</json>
                    </args>
                </call>
                <set>
                    <prop>lasers</prop>
                    <value><call>
                        <func>copy</func>
                        <args>
                            <json>[]</json>
                        </args>
                    </call></value>
                </set>
                <for>
                    <start><json>0</json></start>
                    <stop><json>4</json></stop>
                    <body>
                        <call>
                            <func>push</func>
                            <args>
                                <get>lasers</get>
                                <call>
                                    <func>createLaser</func>
                                    <args>
                                        <json>[16, 17, 18]</json>
                                        <json>1</json>
                                        <json>4</json>
                                        <json>null</json>
                                        <json>null</json>
                                    </args>
                                </call>
                            </args>
                        </call>
                    </body>
                </for>
                <for>
                    <of><get>lasers</get></of>
                    <body>
                        <call>
                            <func>engine.rootEntity.addEntity</func>
                            <args>
                                <get>arg:value</get>
                            </args>
                        </call>
                    </body>
                </for>
                <call>
                    <func>func:place-lasers</func>
                    <args>
                        <get>dir</get>
                        <get>radius</get>
                    </args>
                </call>
            </start>
            <stop>
                <for>
                    <of><get>lasers</get></of>
                    <body>
                        <call>
                            <func>engine.rootEntity.remEntity</func>
                            <args>
                                <get>arg:value</get>
                            </args>
                        </call>
                    </body>
                </for>
                <set>
                    <prop>lasers</prop>
                    <value><call>
                        <func>copy</func>
                        <args>
                            <json>[]</json>
                        </args>
                    </call></value>
                </set>
            </stop>
            <continual>
                <set>
                    <prop>shootingTimer</prop>
                    <value><op>
                        <left><get>shootingTimer</get></left>
                        <op>-</op>
                        <right><get>env.delta</get></right>
                    </op></value>
                </set>
                <if>
                    <cond><op>
                        <left><get>shootingTimer</get></left>
                        <op>lt</op>
                        <right><json>0</json></right>
                    </op></cond>
                    <true>
                        <set>
                            <prop>reverse</prop>
                            <value><json>true</json></value>
                        </set>
                        <set>
                            <prop>state</prop>
                            <value><json>"split2"</json></value>
                        </set>
                    </true>
                </if>
                <call>
                    <func>gazeAt</func>
                    <args>
                        <get>engine.playerEntity.pos</get>
                        <json>0.01</json>
                    </args>
                </call>
                <call>
                    <func>func:place-pieces</func>
                    <args>
                        <get>dir</get>
                        <json>14</json>
                        <json>20</json>
                    </args>
                </call>
                <call>
                    <func>engine.cameraEntity.addShakeFrom</func>
                    <args>
                        <get>pos</get>
                        <json>0.15</json>
                    </args>
                </call>
                <call>
                    <func>func:place-lasers</func>
                    <args>
                        <get>dir</get>
                        <get>radius</get>
                    </args>
                </call>
            </continual>
        </state>
    </states>

    <events>
        <event name="death">
            <if>
                <cond><get>lasers</get></cond>
                <true>
                    <for>
                        <of><get>lasers</get></of>
                        <body>
                            <call>
                                <func>engine.rootEntity.remEntity</func>
                                <args>
                                    <get>arg:value</get>
                                </args>
                            </call>
                        </body>
                    </for>
                </true>
            </if>
        </event>
    </events>
</body>